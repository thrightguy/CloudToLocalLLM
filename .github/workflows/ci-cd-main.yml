name: CI/CD Main Pipeline

on:
  push:
    branches: [ master ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean
      skip_deployment:
        description: 'Skip VPS deployment'
        required: false
        default: false
        type: boolean
      force_rebuild:
        description: 'Force complete rebuild'
        required: false
        default: false
        type: boolean

env:
  FLUTTER_VERSION: '3.32.2'
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Version Management using reusable workflow
  version-management:
    uses: ./.github/workflows/reusable-version-management.yml
    with:
      increment_type: build
      commit_changes: true
      use_timestamp_build: true
    secrets: inherit

  # Cross-Platform Build using reusable workflow
  build-cross-platform:
    uses: ./.github/workflows/reusable-flutter-build.yml
    needs: version-management
    with:
      flutter_version: '3.32.2'
      platforms: 'web,linux,windows'
      version: ${{ needs.version-management.outputs.version }}
      skip_tests: ${{ inputs.skip_tests || false }}
    secrets: inherit

  # Linux Package Building using reusable workflow
  build-linux-packages:
    uses: ./.github/workflows/reusable-package-build.yml
    needs: [version-management, build-cross-platform]
    with:
      flutter_version: '3.32.2'
      package_types: 'deb'
      version: ${{ needs.version-management.outputs.version }}
    secrets: inherit

  # VPS Deployment using reusable workflow
  deploy-vps:
    uses: ./.github/workflows/reusable-vps-deployment.yml
    needs: [version-management, build-cross-platform]
    if: ${{ !inputs.skip_deployment }}
    with:
      environment: production
      version: ${{ needs.version-management.outputs.version }}
    secrets:
      ssh_private_key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}

  # Notification and Cleanup
  notify-completion:
    runs-on: ubuntu-latest
    needs: [version-management, build-cross-platform, build-linux-packages, deploy-vps]
    if: always()
    steps:
      - name: Determine overall status
        id: status
        run: |
          if [ "${{ needs.deploy-vps.result }}" = "success" ] || [ "${{ needs.deploy-vps.result }}" = "skipped" ]; then
            if [ "${{ needs.build-cross-platform.result }}" = "success" ] && [ "${{ needs.build-linux-packages.result }}" = "success" ]; then
              echo "status=success" >> $GITHUB_OUTPUT
            else
              echo "status=partial" >> $GITHUB_OUTPUT
            fi
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Create deployment summary
        run: |
          echo "## 🚀 CloudToLocalLLM CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.version-management.outputs.full_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Status:** ${{ steps.status.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment:** ${{ needs.deploy-vps.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Results" >> $GITHUB_STEP_SUMMARY
          echo "- Cross-platform builds: ${{ needs.build-cross-platform.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Linux packages: ${{ needs.build-linux-packages.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.status.outputs.status }}" = "success" ]; then
            echo "✅ Pipeline completed successfully!" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.status.outputs.status }}" = "partial" ]; then
            echo "⚠️ Pipeline completed with some issues" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Pipeline failed" >> $GITHUB_STEP_SUMMARY
          fi
