// Mocks generated by Mockito 5.4.6 from annotations
// in cloudtolocalllm/test/services/tunnel_fallback_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i6;

import 'package:cloudtolocalllm/services/auth_service.dart' as _i8;
import 'package:cloudtolocalllm/services/local_ollama_connection_service.dart'
    as _i7;
import 'package:cloudtolocalllm/services/tunnel_manager_service.dart' as _i2;
import 'package:flutter/foundation.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTunnelConfig_0 extends _i1.SmartFake implements _i2.TunnelConfig {
  _FakeTunnelConfig_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeValueNotifier_1<T> extends _i1.SmartFake
    implements _i3.ValueNotifier<T> {
  _FakeValueNotifier_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TunnelManagerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTunnelManagerService extends _i1.Mock
    implements _i2.TunnelManagerService {
  MockTunnelManagerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);

  @override
  bool get isConnecting =>
      (super.noSuchMethod(Invocation.getter(#isConnecting), returnValue: false)
          as bool);

  @override
  _i2.TunnelConfig get config =>
      (super.noSuchMethod(
            Invocation.getter(#config),
            returnValue: _FakeTunnelConfig_0(this, Invocation.getter(#config)),
          )
          as _i2.TunnelConfig);

  @override
  Map<String, _i2.ConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(
            Invocation.getter(#connectionStatus),
            returnValue: <String, _i2.ConnectionStatus>{},
          )
          as Map<String, _i2.ConnectionStatus>);

  bool get hasZrokTunnel =>
      (super.noSuchMethod(Invocation.getter(#hasZrokTunnel), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void handleCloudBridgeMessage(Map<String, dynamic>? message) =>
      super.noSuchMethod(
        Invocation.method(#handleCloudBridgeMessage, [message]),
        returnValueForMissingStub: null,
      );

  @override
  void updateConnectionStatus(bool? isConnected, String? error) =>
      super.noSuchMethod(
        Invocation.method(#updateConnectionStatus, [isConnected, error]),
        returnValueForMissingStub: null,
      );

  @override
  String generateUuid() =>
      (super.noSuchMethod(
            Invocation.method(#generateUuid, []),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.method(#generateUuid, []),
            ),
          )
          as String);

  @override
  _i4.Future<void> shutdown() =>
      (super.noSuchMethod(
            Invocation.method(#shutdown, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<void> reconnect() =>
      (super.noSuchMethod(
            Invocation.method(#reconnect, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateConfiguration(_i2.TunnelConfig? newConfig) =>
      (super.noSuchMethod(
            Invocation.method(#updateConfiguration, [newConfig]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i2.TrayConnectionStatus getTrayConnectionStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getTrayConnectionStatus, []),
            returnValue: _i2.TrayConnectionStatus.disconnected,
          )
          as _i2.TrayConnectionStatus);

  @override
  void enableWizardMode() => super.noSuchMethod(
    Invocation.method(#enableWizardMode, []),
    returnValueForMissingStub: null,
  );

  @override
  void disableWizardMode() => super.noSuchMethod(
    Invocation.method(#disableWizardMode, []),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, dynamic> getWizardStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getWizardStatus, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i4.Future<Map<String, dynamic>> testConnectionForWizard(
    _i2.TunnelConfig? testConfig,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#testConnectionForWizard, [testConfig]),
            returnValue: _i4.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i4.Future<Map<String, dynamic>>);

  @override
  Map<String, dynamic> getConnectionDiagnostics() =>
      (super.noSuchMethod(
            Invocation.method(#getConnectionDiagnostics, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i4.Future<Map<String, dynamic>> validateTunnelEndToEnd() =>
      (super.noSuchMethod(
            Invocation.method(#validateTunnelEndToEnd, []),
            returnValue: _i4.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i4.Future<Map<String, dynamic>>);

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [LocalOllamaConnectionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalOllamaConnectionService extends _i1.Mock
    implements _i7.LocalOllamaConnectionService {
  MockLocalOllamaConnectionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);

  @override
  bool get isConnecting =>
      (super.noSuchMethod(Invocation.getter(#isConnecting), returnValue: false)
          as bool);

  @override
  List<String> get models =>
      (super.noSuchMethod(Invocation.getter(#models), returnValue: <String>[])
          as List<String>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> testConnection() =>
      (super.noSuchMethod(
            Invocation.method(#testConnection, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<String?> chat({
    required String? model,
    required String? message,
    List<Map<String, String>>? history,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#chat, [], {
              #model: model,
              #message: message,
              #history: history,
            }),
            returnValue: _i4.Future<String?>.value(),
          )
          as _i4.Future<String?>);

  @override
  _i4.Future<void> reconnect() =>
      (super.noSuchMethod(
            Invocation.method(#reconnect, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i8.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ValueNotifier<bool> get isAuthenticated =>
      (super.noSuchMethod(
            Invocation.getter(#isAuthenticated),
            returnValue: _FakeValueNotifier_1<bool>(
              this,
              Invocation.getter(#isAuthenticated),
            ),
          )
          as _i3.ValueNotifier<bool>);

  @override
  _i3.ValueNotifier<bool> get isLoading =>
      (super.noSuchMethod(
            Invocation.getter(#isLoading),
            returnValue: _FakeValueNotifier_1<bool>(
              this,
              Invocation.getter(#isLoading),
            ),
          )
          as _i3.ValueNotifier<bool>);

  @override
  bool get isWeb =>
      (super.noSuchMethod(Invocation.getter(#isWeb), returnValue: false)
          as bool);

  @override
  bool get isMobile =>
      (super.noSuchMethod(Invocation.getter(#isMobile), returnValue: false)
          as bool);

  @override
  bool get isDesktop =>
      (super.noSuchMethod(Invocation.getter(#isDesktop), returnValue: false)
          as bool);

  @override
  bool get isValidatingToken =>
      (super.noSuchMethod(
            Invocation.getter(#isValidatingToken),
            returnValue: false,
          )
          as bool);

  @override
  bool get supportsBiometrics =>
      (super.noSuchMethod(
            Invocation.getter(#supportsBiometrics),
            returnValue: false,
          )
          as bool);

  @override
  bool get supportsDeepLinking =>
      (super.noSuchMethod(
            Invocation.getter(#supportsDeepLinking),
            returnValue: false,
          )
          as bool);

  @override
  bool get supportsSecureStorage =>
      (super.noSuchMethod(
            Invocation.getter(#supportsSecureStorage),
            returnValue: false,
          )
          as bool);

  @override
  String get recommendedAuthMethod =>
      (super.noSuchMethod(
            Invocation.getter(#recommendedAuthMethod),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#recommendedAuthMethod),
            ),
          )
          as String);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> login() =>
      (super.noSuchMethod(
            Invocation.method(#login, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> handleCallback() =>
      (super.noSuchMethod(
            Invocation.method(#handleCallback, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> loginWithBiometrics() =>
      (super.noSuchMethod(
            Invocation.method(#loginWithBiometrics, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> isBiometricAvailable() =>
      (super.noSuchMethod(
            Invocation.method(#isBiometricAvailable, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> refreshTokenIfNeeded() =>
      (super.noSuchMethod(
            Invocation.method(#refreshTokenIfNeeded, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  Map<String, dynamic> getPlatformInfo() =>
      (super.noSuchMethod(
            Invocation.method(#getPlatformInfo, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i4.Future<String?> getValidatedAccessToken({bool? forceRefresh = false}) =>
      (super.noSuchMethod(
            Invocation.method(#getValidatedAccessToken, [], {
              #forceRefresh: forceRefresh,
            }),
            returnValue: _i4.Future<String?>.value(),
          )
          as _i4.Future<String?>);

  @override
  _i4.Future<void> loginWithPersistence() =>
      (super.noSuchMethod(
            Invocation.method(#loginWithPersistence, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> logoutWithCleanup() =>
      (super.noSuchMethod(
            Invocation.method(#logoutWithCleanup, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> validateAuthentication() =>
      (super.noSuchMethod(
            Invocation.method(#validateAuthentication, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
